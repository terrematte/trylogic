<h3>Regras da Negação II</h3>

<p>Neste passo, vamos aprender mais duas regras para negação que -- juntamente a (¬ I) e (¬ E) -- completam a caracterização da negação clássica: <b>⊥<sub>c</sub></b> e <b>⊥<sub>int</sub></b>.</p><br/>
 
<p><i>- Absurdo intuicionista</i> <b>(⊥<sub>int</sub>)</b>: Permite obter uma derivação de um γ <i>qualquer</i>, a partir de uma derivação de ⊥. Intuitivamente, expressa que se verificamos o absurdo, então qualquer fórmula pode ser verificada, raciocínio também chamado de <a href="http://pt.wikipedia.org/wiki/Princ%C3%ADpio_de_explos%C3%A3o"  target="_blank">princípio da explosão</a>, <i>ex falso quodlibet</i> ou <i>ex contradictione sequitur quodlibet</i>. No Coq, o comando utilizado é <b>fls_e</b>.</p><br/>

<p><i>- Absurdo Clássico</i> <b>(⊥<sub>c</sub>)</b>: Permite obter uma derivação de α, a partir de uma derivação de ⊥, e um conjunto de hipóteses que <i>pode</i> conter (¬ α). No Coq, o comando utilizado é <b>PCB h</b>, passando como parâmetro uma marca <i>h</i> para a hipótese <b>(¬ α)</b> que eventualmente pode ser descartada. Esta marca <i>h</i> na regra <b>(⊥<sub>c</sub>)</b> deve pelo menos ser:</p>
<p><b>(i)</b> uma marca de uma ou mais hipóteses abertas da fórmula <b>(¬ α)</b> -- representando a hipótese adquirida, ou </p>
<p><b>(ii)</b> uma marca <i>nova</i> que não ocorre na derivação de ⊥.</p><br/>

<p>Note que a regra <b>(⊥<sub>int</sub>)</b> é um caso particular de <b>(⊥<sub>c</sub>)</b>, só que sem hipóteses descartadas.</p><br/>

<p>Vamos demonstrar o seguinte : " α → β, ¬ β ⊢ ¬ α". </p>

<pre><code>Reset Initial.
Require Import ProofWeb.
Variables A B: Prop.
Hypothesis P1 : (A -> B).
Hypothesis P2 : (~ B).
Theorem exDN5_3 : ~A.
Proof. 
</code></pre>

<p>Nossa dica é sempre buscar usar as regras que descartem hipótese -- tais como (→ I), (¬ I) e (⊥<sub>c</sub>) -- e em particular, a regra (⊥<sub>c</sub>) pois por descartar uma fórmula negada, a regra tem <i>maior força dedutiva</i> que a (¬ I). Por isso optamos por (⊥<sub>c</sub>) para se demonstrar :</p>
<code>
PBC h1. 
</code>

<p>De que aplicação de (¬ E) terá vindo o ⊥ ? Algumas opções são (A -> B), (~A) e (B). Vamos optar por (B) e identificá-lo com a premissa P2: </p>

<pre><code>neg_e (B). 
exact P2. 
</code></pre>

<p>Em seguida, obtemos a fórmula B, através da (→ E) na premissa P1: </p>

<pre><code>imp_e A. 
exact P1. 
</code></pre>

<p>Agora, não temos muitas opções além de aplicar novamente o (⊥<sub>c</sub>):</p>

<code>
PBC h2. 
</code>

<p>A opção imediata para (¬ E) é (~A), dado que temos as marcas h1 e h2:  </p>

<pre><code>neg_e (~ A). 
exact h1. 
exact h2. 
</code></pre>

<p>Pronto! Finalizamos a demonstração!</p>

<code>
Qed. 
</code><br/>

<p><i>(Confira o Livro <a href="http://www.dimap.ufrn.br/%7Ejmarcos/courses/LC/Ementa.htm"  target="_blank">DGM</a>, Cap. 1, págs. 32-35. )</i></p>

<center><img  src="/pub/images/logic/r-neg.png" alt="Rules of Negation" width="560"  /></center><br/><br/>
